import React from 'react';
import { useForm, Controller } from 'react-hook-form';

interface Option {
  value: string;
  label: string;
}

interface Field {
  id: string;
  type: string;
  label: string;
  required: boolean;
  placeholder?: string;
  validation?: {
    pattern?: string;
    message?: string;
  };
  options?: Option[];
}

interface FormProps {
  formTitle: string;
  formDescription: string;
  fields: Field[];
}

const DynamicForm: React.FC<FormProps> = ({ formTitle, formDescription, fields }) => {
  const { control, handleSubmit, formState: { errors } } = useForm();

  const onSubmit = (data: any) => {
    console.log(data);
    alert('Form Submitted Successfully!');
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-xl font-bold mb-4">{formTitle}</h1>
      <p className="mb-4">{formDescription}</p>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        {fields.map((field) => (
          <div key={field.id} className="flex flex-col">
            <label htmlFor={field.id} className="font-bold">{field.label}</label>

            {/* Text, Email, and Textarea Fields */}
            {field.type === 'text' || field.type === 'email' || field.type === 'textarea' ? (
              <Controller
                name={field.id}
                control={control}
                rules={{
                  required: field.required && `${field.label} is required`,
                  pattern: field.validation?.pattern ? { value: new RegExp(field.validation.pattern), message: field.validation.message } : undefined,
                }}
                render={({ field }) => (
                  field.type === 'textarea' ? (
                    <textarea
                      {...field}
                      placeholder={field.placeholder}
                      className="p-2 border border-gray-300 rounded"
                    />
                  ) : (
                    <input
                      {...field}
                      type={field.type}
                      placeholder={field.placeholder}
                      className="p-2 border border-gray-300 rounded"
                    />
                  )
                )}
              />
            ) : null}

            {/* Select Field */}
            {field.type === 'select' ? (
              <Controller
                name={field.id}
                control={control}
                rules={{ required: field.required && `Please select a ${field.label}` }}
                render={({ field }) => (
                  <select {...field} className="p-2 border border-gray-300 rounded">
                    <option value="">Select</option>
                    {field.options?.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                )}
              />
            ) : null}

            {/* Radio Field */}
            {field.type === 'radio' ? (
              <div>
                {field.options?.map((option) => (
                  <label key={option.value} className="mr-4">
                    <Controller
                      name={field.id}
                      control={control}
                      rules={{ required: field.required && `Please select a ${field.label}` }}
                      render={({ field }) => (
                        <input
                          {...field}
                          type="radio"
                          value={option.value}
                          className="mr-2"
                        />
                      )}
                    />
                    {option.label}
                  </label>
                ))}
              </div>
            ) : null}

            {/* Display Error Messages */}
            {errors[field.id] && <span className="text-red-500 text-sm">{errors[field.id]?.message}</span>}
          </div>
        ))}
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">Submit</button>
      </form>
    </div>
  );
};

export default DynamicForm;
